/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paintpfinal;


//import org.slf4j.Logger;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.BorderLayout;
import java.awt.image.BufferedImage;

/**
 * Sublcase creada para poder trabajar con la cámara
 * @author Jesús Ruiz Castellano
 */
public class VentanaInternaCamara extends VentanaInterna {
    
    /**
     * Variable creada para poder comunicar esta ventana con la principal
     */
    private VentanaPrincipalPFinal parent;
    private Webcam camara = null;

    /**
     * Crea una nueva VentanaInternaCamara
     */
    private VentanaInternaCamara(VentanaPrincipalPFinal Parent) {
        initComponents();
        parent = Parent;
        camara = Webcam.getDefault();
        if (camara != null) {
            WebcamPanel areaVisual = new WebcamPanel(camara);
            if (areaVisual!= null) {
                getContentPane().add(areaVisual, BorderLayout.CENTER);
                pack();
            }
        }
        this.setTitle("Cámara");
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/Camara.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(300, 300));
        setPreferredSize(new java.awt.Dimension(500, 450));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );

        getContentPane().add(panel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método para cerrar la ventana y volver a activar el botón de Guardado de 
     * la ventana principal.
     * @param evt : evento de cerrar la ventana
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        if (camara != null) {
            camara.close();
            parent.getBotonGuardar().setEnabled(true);
        }
    }//GEN-LAST:event_formInternalFrameClosing

    
    public static VentanaInternaCamara getInstance(VentanaPrincipalPFinal Parent){
        VentanaInternaCamara v = new VentanaInternaCamara(Parent);
        return (v.camara != null ? v:null);
    }
    
    @Override
    public BufferedImage getImage() {
        return camara.getImage();
    }
    

    @Override
    public int getType() {
        return 2;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables
}
