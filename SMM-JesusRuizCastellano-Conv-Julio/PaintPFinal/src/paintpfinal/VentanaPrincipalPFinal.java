/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paintpfinal;

import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import static java.lang.Math.abs;
import static java.lang.Math.atan;
import static java.lang.Math.sin;
import static java.lang.Math.toRadians;
import java.util.ArrayList;
import javafx.scene.control.ComboBox;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.TintOp;
import sm.jrc.graficos.*;
import sm.jrc.imagen.MiOpCC;
import sm.jrc.imagen.MiOpPP;
import sm.jrc.imagen.SepiaOp;
import sm.jrc.imagen.UmbralizacionOp;
import sm.jrc.iu.*;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;



/**
 * Clase para diseñar la interfaz gráfica de la aplicación.
 * @author Jesús Ruiz Castellano
 */
public class VentanaPrincipalPFinal extends javax.swing.JFrame {
    
    /**
     * Imagen a la que le aplico las propiedades de imagen.
     */
    private BufferedImage bufferedImg;
    
    /**
     * Imagen extra para deshacer la reciente propiedad aplicada.
     */
    private BufferedImage imgReset;
    
    /**
     * Variable para controlar la reproducción de sonidos.
     */
    private SMClipPlayer player;
    
    /**
     * Variable para controlar la reproducción de grabaciones.
     */
    private SMSoundRecorder recorder;
    
    /**
     * Variable para controlar la reproducción de vídeos.
     */
    private VentanaInternaVLCPlayer viVLCP;
    
    /**
     * Variable para gestionar la pausa del sonido.
     */
    private boolean pausa;
    
    /**
     * Variable para gestionar la finalización de la reproducción del sonido.
     */
    private boolean sonidoStop;
    
    /**
     * Fichero temporal para poder almacenar una grabación de sonido y guardarla
     * posteriormente.
     */
    private File tempFile;
    
    /**
     * Variable para gestionar las diferentes opciones añadidas sobre el operador
     * de Umbralización.
     */
    private UmbralizacionOp umbral;
    
    /**
     * Figura seleccionada en el Lienzo que se va a editar.
     */
    private JFigura figura;
    
    /**
     * Conjunto de figuras contenidas en una misma Ventana.
     */
    private ArrayList<JFigura> vFiguras;
    
    /**
     * Variable para gestionar si estamos editando o creando una figura
     */
    private boolean editar;

    /**
     * Crea un nuevo objeto VentanaPrincipalPFinal, con los valores por defecto.
     * Sin ninguna Ventana Interna abierta.
     */
    public VentanaPrincipalPFinal() {
        figura = null;
        player = null;
        recorder = null;
        pausa = sonidoStop = editar = false;
        initComponents();
        ActualizarEstado();
        sliderUmbral.setEnabled(false);
        BotMover.setEnabled(false);
        setActivarPropiedadesFiguras(false);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoBHerramientas = new javax.swing.ButtonGroup();
        GrupoColores = new javax.swing.ButtonGroup();
        GrupoSonido = new javax.swing.ButtonGroup();
        GrupoGrabacion = new javax.swing.ButtonGroup();
        GrupoUmbral = new javax.swing.ButtonGroup();
        Escritorio = new javax.swing.JDesktopPane();
        PanelInferior = new javax.swing.JPanel();
        PanelBEstado = new javax.swing.JPanel();
        BarraEstado = new javax.swing.JLabel();
        panelPuntoCoordenadas = new javax.swing.JPanel();
        estadoPunto = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        estadoRGB = new javax.swing.JLabel();
        PanInfPropiedades = new javax.swing.JPanel();
        PanBrillo = new javax.swing.JPanel();
        SliderBrillo = new javax.swing.JSlider();
        PanFiltro = new javax.swing.JPanel();
        ComboFiltro = new javax.swing.JComboBox<>();
        PanContraste = new javax.swing.JPanel();
        botContrastNormal = new javax.swing.JToggleButton();
        botContrastIluminacion = new javax.swing.JToggleButton();
        botContrastOscureci = new javax.swing.JToggleButton();
        botContrastNeg = new javax.swing.JToggleButton();
        PanSinusoidal = new javax.swing.JPanel();
        botSinusoidal = new javax.swing.JToggleButton();
        botSepia = new javax.swing.JToggleButton();
        botTintado = new javax.swing.JToggleButton();
        botEcualizar = new javax.swing.JToggleButton();
        botMiOpCC = new javax.swing.JToggleButton();
        botMiOpPP = new javax.swing.JToggleButton();
        PanRotacion = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        botRot90 = new javax.swing.JButton();
        botRot180 = new javax.swing.JButton();
        botRot270 = new javax.swing.JButton();
        PanEscala = new javax.swing.JPanel();
        botEscalaMenos = new javax.swing.JButton();
        botEscalaMas = new javax.swing.JButton();
        PanColor = new javax.swing.JPanel();
        botBandas = new javax.swing.JButton();
        ComboEspacioColores = new javax.swing.JComboBox<>();
        PanUmbral = new javax.swing.JPanel();
        sliderUmbral = new javax.swing.JSlider();
        botUmbralGrises = new javax.swing.JToggleButton();
        botUmbralColor = new javax.swing.JToggleButton();
        botUmbralInvertido = new javax.swing.JToggleButton();
        panelBHerramientas = new javax.swing.JPanel();
        BHerramientasOpciones = new javax.swing.JToolBar();
        BotNuevo = new javax.swing.JButton();
        BotAbrir = new javax.swing.JButton();
        BotGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        BotLinea = new javax.swing.JToggleButton();
        BotRectangulo = new javax.swing.JToggleButton();
        BotElipse = new javax.swing.JToggleButton();
        BHerramientasFiguras = new javax.swing.JToolBar();
        jLabel8 = new javax.swing.JLabel();
        comboListaFiguras = new javax.swing.JComboBox<JFigura>();
        BotMover = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        coorX = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        coorY = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        sliderTransparencia = new javax.swing.JSlider();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jLabel7 = new javax.swing.JLabel();
        BotColorear = new javax.swing.JToggleButton();
        ComboBColoresRelleno = new javax.swing.JComboBox<Color>();
        panelColorRelleno = new javax.swing.JPanel();
        paletaColoresRelleno = new javax.swing.JToggleButton();
        colorSelecPaletaRelleno = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        comboDegradado = new javax.swing.JComboBox<>();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jLabel6 = new javax.swing.JLabel();
        ComboBColoresTrazo = new javax.swing.JComboBox<Color>();
        panelTrazo = new javax.swing.JPanel();
        paletaColoresTrazo = new javax.swing.JToggleButton();
        colorSelecPaletaTrazo = new javax.swing.JPanel();
        GrosorSpinner = new javax.swing.JSpinner();
        trazoDiscontinuo = new javax.swing.JToggleButton();
        BotAlisar = new javax.swing.JToggleButton();
        BHerramientasOtrosMedios = new javax.swing.JToolBar();
        BotPlay = new javax.swing.JToggleButton();
        BotPause = new javax.swing.JToggleButton();
        BotStop = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        BotGrabar = new javax.swing.JToggleButton();
        BotPararGrabar = new javax.swing.JToggleButton();
        comboListaRepro = new javax.swing.JComboBox<File>();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        BotCamara = new javax.swing.JButton();
        BotCapturaCam = new javax.swing.JButton();
        BarraMenu = new javax.swing.JMenuBar();
        BMenuArchivo = new javax.swing.JMenu();
        menuNuevo = new javax.swing.JMenuItem();
        menuAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        BMenuVer = new javax.swing.JMenu();
        BMenuEditbarrEstado = new javax.swing.JCheckBoxMenuItem();
        BMenuEditbarrPropiedades = new javax.swing.JCheckBoxMenuItem();
        BMeduEditbarrSonYVi = new javax.swing.JCheckBoxMenuItem();
        BMenuImagen = new javax.swing.JMenu();
        menuResacaleOp = new javax.swing.JMenuItem();
        menuConvolveOp = new javax.swing.JMenuItem();
        menuAffineTransformOp = new javax.swing.JMenuItem();
        menuLookupOp = new javax.swing.JMenuItem();
        menuBandCombineOp = new javax.swing.JMenuItem();
        menuColorConvertOp = new javax.swing.JMenuItem();
        menuDuplicarImg = new javax.swing.JMenuItem();
        menuReset = new javax.swing.JMenuItem();
        menuMilookupOp = new javax.swing.JMenuItem();
        BMenuAyuda = new javax.swing.JMenu();
        menuAyuAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mi Aplicación Multimedia");
        setIconImage(getIconImage());
        setMinimumSize(new java.awt.Dimension(1550, 650));
        setPreferredSize(new java.awt.Dimension(1550, 684));

        Escritorio.setBackground(new java.awt.Color(240, 240, 240));
        Escritorio.setForeground(new java.awt.Color(240, 240, 240));
        Escritorio.setPreferredSize(new java.awt.Dimension(500, 500));
        getContentPane().add(Escritorio, java.awt.BorderLayout.CENTER);

        PanelInferior.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 153), null));
        PanelInferior.setLayout(new java.awt.BorderLayout());

        PanelBEstado.setPreferredSize(new java.awt.Dimension(842, 25));
        PanelBEstado.setLayout(new java.awt.BorderLayout());

        BarraEstado.setOpaque(true);
        PanelBEstado.add(BarraEstado, java.awt.BorderLayout.WEST);

        panelPuntoCoordenadas.setLayout(new java.awt.BorderLayout());
        panelPuntoCoordenadas.add(estadoPunto, java.awt.BorderLayout.EAST);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelPuntoCoordenadas.add(jSeparator4, java.awt.BorderLayout.CENTER);
        panelPuntoCoordenadas.add(estadoRGB, java.awt.BorderLayout.WEST);

        PanelBEstado.add(panelPuntoCoordenadas, java.awt.BorderLayout.EAST);

        PanelInferior.add(PanelBEstado, java.awt.BorderLayout.SOUTH);

        PanInfPropiedades.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PanBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, null, null, new java.awt.Color(153, 153, 153)), "Brillo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        PanBrillo.setLayout(null);

        SliderBrillo.setMaximum(255);
        SliderBrillo.setMinimum(-255);
        SliderBrillo.setToolTipText("Seleccionar nivel de brillo");
        SliderBrillo.setValue(0);
        SliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SliderBrilloStateChanged(evt);
            }
        });
        SliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                SliderBrilloFocusLost(evt);
            }
        });
        PanBrillo.add(SliderBrillo);
        SliderBrillo.setBounds(10, 50, 90, 30);

        PanInfPropiedades.add(PanBrillo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 110, 100));

        PanFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, null, null, new java.awt.Color(153, 153, 153)), "Filtro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        PanFiltro.setLayout(null);

        ComboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Fronteras" }));
        ComboFiltro.setToolTipText("Tipo de filtro");
        ComboFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboFiltroActionPerformed(evt);
            }
        });
        PanFiltro.add(ComboFiltro);
        ComboFiltro.setBounds(10, 50, 70, 26);

        PanInfPropiedades.add(PanFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 90, 100));

        PanContraste.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, null, null, new java.awt.Color(153, 153, 153)), "Contraste", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        PanContraste.setMaximumSize(new java.awt.Dimension(60, 60));
        PanContraste.setMinimumSize(new java.awt.Dimension(60, 60));
        PanContraste.setPreferredSize(new java.awt.Dimension(60, 60));
        PanContraste.setLayout(null);

        botContrastNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/contraste.png"))); // NOI18N
        botContrastNormal.setToolTipText("Contraste normal");
        botContrastNormal.setMaximumSize(new java.awt.Dimension(60, 60));
        botContrastNormal.setMinimumSize(new java.awt.Dimension(60, 60));
        botContrastNormal.setPreferredSize(new java.awt.Dimension(60, 60));
        botContrastNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botContrastNormalActionPerformed(evt);
            }
        });
        PanContraste.add(botContrastNormal);
        botContrastNormal.setBounds(20, 30, 30, 30);

        botContrastIluminacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/iluminar.png"))); // NOI18N
        botContrastIluminacion.setToolTipText("Contraste iluminado");
        botContrastIluminacion.setMaximumSize(new java.awt.Dimension(60, 60));
        botContrastIluminacion.setMinimumSize(new java.awt.Dimension(60, 60));
        botContrastIluminacion.setPreferredSize(new java.awt.Dimension(60, 60));
        botContrastIluminacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botContrastIluminacionActionPerformed(evt);
            }
        });
        PanContraste.add(botContrastIluminacion);
        botContrastIluminacion.setBounds(50, 30, 30, 30);

        botContrastOscureci.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/oscurecer.png"))); // NOI18N
        botContrastOscureci.setToolTipText("Contraste oscurecido");
        botContrastOscureci.setMaximumSize(new java.awt.Dimension(60, 60));
        botContrastOscureci.setMinimumSize(new java.awt.Dimension(60, 60));
        botContrastOscureci.setPreferredSize(new java.awt.Dimension(60, 60));
        botContrastOscureci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botContrastOscureciActionPerformed(evt);
            }
        });
        PanContraste.add(botContrastOscureci);
        botContrastOscureci.setBounds(20, 60, 30, 30);

        botContrastNeg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/negativo_opt.png"))); // NOI18N
        botContrastNeg.setToolTipText("Imagen en negativo");
        botContrastNeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botContrastNegActionPerformed(evt);
            }
        });
        PanContraste.add(botContrastNeg);
        botContrastNeg.setBounds(50, 60, 30, 30);

        PanInfPropiedades.add(PanContraste, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 100, 100));

        PanSinusoidal.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, null, null, new java.awt.Color(153, 153, 153)), "Otros filtros", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        PanSinusoidal.setLayout(null);

        botSinusoidal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/sinusoidal.png"))); // NOI18N
        botSinusoidal.setToolTipText("Aplicar filtro Sinusoidal");
        botSinusoidal.setMaximumSize(new java.awt.Dimension(60, 60));
        botSinusoidal.setMinimumSize(new java.awt.Dimension(60, 60));
        botSinusoidal.setPreferredSize(new java.awt.Dimension(60, 60));
        botSinusoidal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botSinusoidalActionPerformed(evt);
            }
        });
        PanSinusoidal.add(botSinusoidal);
        botSinusoidal.setBounds(20, 30, 30, 30);

        botSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/sepia.png"))); // NOI18N
        botSepia.setToolTipText("Filtro sepia o fotografía antigua");
        botSepia.setMaximumSize(new java.awt.Dimension(60, 60));
        botSepia.setMinimumSize(new java.awt.Dimension(60, 60));
        botSepia.setPreferredSize(new java.awt.Dimension(60, 60));
        botSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botSepiaActionPerformed(evt);
            }
        });
        PanSinusoidal.add(botSepia);
        botSepia.setBounds(50, 30, 30, 30);

        botTintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/tintar.png"))); // NOI18N
        botTintado.setToolTipText("Tintado");
        botTintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botTintadoActionPerformed(evt);
            }
        });
        PanSinusoidal.add(botTintado);
        botTintado.setBounds(50, 60, 30, 30);

        botEcualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/ecualizar.png"))); // NOI18N
        botEcualizar.setToolTipText("Ecualizador");
        botEcualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botEcualizarActionPerformed(evt);
            }
        });
        PanSinusoidal.add(botEcualizar);
        botEcualizar.setBounds(20, 60, 30, 30);

        botMiOpCC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/cc (1).png"))); // NOI18N
        botMiOpCC.setToolTipText("Operación componente a componente");
        botMiOpCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botMiOpCCActionPerformed(evt);
            }
        });
        PanSinusoidal.add(botMiOpCC);
        botMiOpCC.setBounds(80, 30, 30, 30);

        botMiOpPP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/pp (1).png"))); // NOI18N
        botMiOpPP.setToolTipText("Operación píxel a píxel");
        botMiOpPP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botMiOpPPActionPerformed(evt);
            }
        });
        PanSinusoidal.add(botMiOpPP);
        botMiOpPP.setBounds(80, 60, 30, 30);

        PanInfPropiedades.add(PanSinusoidal, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 130, 100));

        PanRotacion.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, null, null, new java.awt.Color(153, 153, 153)), "Rotación", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        PanRotacion.setLayout(null);

        sliderRotacion.setMajorTickSpacing(90);
        sliderRotacion.setMaximum(360);
        sliderRotacion.setPaintTicks(true);
        sliderRotacion.setToolTipText("Seleccionar grado de giro");
        sliderRotacion.setValue(0);
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        PanRotacion.add(sliderRotacion);
        sliderRotacion.setBounds(10, 30, 170, 30);

        botRot90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/rotacion90.png"))); // NOI18N
        botRot90.setToolTipText("Girar 90º a la derecha");
        botRot90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botRot90ActionPerformed(evt);
            }
        });
        PanRotacion.add(botRot90);
        botRot90.setBounds(40, 60, 30, 30);

        botRot180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/rotacion180.png"))); // NOI18N
        botRot180.setToolTipText("Girar 180º");
        botRot180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botRot180ActionPerformed(evt);
            }
        });
        PanRotacion.add(botRot180);
        botRot180.setBounds(80, 60, 30, 30);

        botRot270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/rotacion270.png"))); // NOI18N
        botRot270.setToolTipText("Girar 270º a la derecha");
        botRot270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botRot270ActionPerformed(evt);
            }
        });
        PanRotacion.add(botRot270);
        botRot270.setBounds(120, 60, 30, 30);

        PanInfPropiedades.add(PanRotacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 190, 100));

        PanEscala.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, null, null, new java.awt.Color(153, 153, 153)), "Escala", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        PanEscala.setLayout(null);

        botEscalaMenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/disminuir.png"))); // NOI18N
        botEscalaMenos.setMnemonic('-');
        botEscalaMenos.setToolTipText("Disminuir tamaño     (Alt+Menos)");
        botEscalaMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botEscalaMenosActionPerformed(evt);
            }
        });
        PanEscala.add(botEscalaMenos);
        botEscalaMenos.setBounds(20, 30, 30, 30);

        botEscalaMas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/aumentar.png"))); // NOI18N
        botEscalaMas.setMnemonic('+');
        botEscalaMas.setToolTipText("Aumentar tamaño     (Alt+Mas)");
        botEscalaMas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botEscalaMasActionPerformed(evt);
            }
        });
        PanEscala.add(botEscalaMas);
        botEscalaMas.setBounds(20, 60, 30, 30);

        PanInfPropiedades.add(PanEscala, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 20, 70, 100));

        PanColor.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, null, null, new java.awt.Color(153, 153, 153)), "Color", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        PanColor.setLayout(null);

        botBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/bandas.png"))); // NOI18N
        botBandas.setToolTipText("Extraccion de bandas");
        botBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botBandasActionPerformed(evt);
            }
        });
        PanColor.add(botBandas);
        botBandas.setBounds(10, 30, 70, 30);

        ComboEspacioColores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " RGB", " GRAY", " YCC" }));
        ComboEspacioColores.setToolTipText("Conversion al espacio de color");
        ComboEspacioColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboEspacioColoresActionPerformed(evt);
            }
        });
        PanColor.add(ComboEspacioColores);
        ComboEspacioColores.setBounds(10, 60, 70, 30);

        PanInfPropiedades.add(PanColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 90, 100));

        PanUmbral.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, null, null, new java.awt.Color(153, 153, 153)), "Umbralización", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        PanUmbral.setToolTipText("Primero seleccione el botón del tipo de umbral");
        PanUmbral.setLayout(null);

        sliderUmbral.setToolTipText("Seleccionar nivel de umbralización");
        sliderUmbral.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderUmbralStateChanged(evt);
            }
        });
        sliderUmbral.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderUmbralFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderUmbralFocusLost(evt);
            }
        });
        PanUmbral.add(sliderUmbral);
        sliderUmbral.setBounds(10, 60, 130, 26);

        GrupoUmbral.add(botUmbralGrises);
        botUmbralGrises.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/escalagrises.png"))); // NOI18N
        botUmbralGrises.setToolTipText("Umbralización normal");
        botUmbralGrises.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botUmbralGrisesActionPerformed(evt);
            }
        });
        PanUmbral.add(botUmbralGrises);
        botUmbralGrises.setBounds(20, 30, 30, 30);

        GrupoUmbral.add(botUmbralColor);
        botUmbralColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/color.jpg"))); // NOI18N
        botUmbralColor.setToolTipText("Umbralizar en color");
        botUmbralColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botUmbralColorActionPerformed(evt);
            }
        });
        PanUmbral.add(botUmbralColor);
        botUmbralColor.setBounds(100, 30, 30, 30);

        GrupoUmbral.add(botUmbralInvertido);
        botUmbralInvertido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/descarga.png"))); // NOI18N
        botUmbralInvertido.setToolTipText("Umbralización inversa");
        botUmbralInvertido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botUmbralInvertidoActionPerformed(evt);
            }
        });
        PanUmbral.add(botUmbralInvertido);
        botUmbralInvertido.setBounds(60, 30, 30, 29);

        PanInfPropiedades.add(PanUmbral, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 20, 150, 100));

        PanelInferior.add(PanInfPropiedades, java.awt.BorderLayout.CENTER);

        getContentPane().add(PanelInferior, java.awt.BorderLayout.SOUTH);

        panelBHerramientas.setLayout(new java.awt.BorderLayout());

        BHerramientasOpciones.setRollover(true);

        BotNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/nuevo.png"))); // NOI18N
        BotNuevo.setMnemonic('n');
        BotNuevo.setToolTipText("Nuevo Lienzo     (Alt+n)");
        BotNuevo.setFocusable(false);
        BotNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotNuevoActionPerformed(evt);
            }
        });
        BHerramientasOpciones.add(BotNuevo);

        BotAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/abrir.png"))); // NOI18N
        BotAbrir.setMnemonic('a');
        BotAbrir.setToolTipText("Abrir archivo     (Alt+a)");
        BotAbrir.setFocusable(false);
        BotAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAbrirActionPerformed(evt);
            }
        });
        BHerramientasOpciones.add(BotAbrir);
        BotAbrir.getAccessibleContext().setAccessibleName("Abrir archivo");

        BotGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/guardar.png"))); // NOI18N
        BotGuardar.setMnemonic('g');
        BotGuardar.setToolTipText("Guardar     (Alt+g)");
        BotGuardar.setFocusable(false);
        BotGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotGuardarActionPerformed(evt);
            }
        });
        BHerramientasOpciones.add(BotGuardar);
        BHerramientasOpciones.add(jSeparator1);

        GrupoBHerramientas.add(BotLinea);
        BotLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/linea.png"))); // NOI18N
        BotLinea.setToolTipText("Línea");
        BotLinea.setFocusable(false);
        BotLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotLineaActionPerformed(evt);
            }
        });
        BHerramientasOpciones.add(BotLinea);

        GrupoBHerramientas.add(BotRectangulo);
        BotRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/rectangulo.png"))); // NOI18N
        BotRectangulo.setToolTipText("Rectángulo");
        BotRectangulo.setFocusable(false);
        BotRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotRectanguloActionPerformed(evt);
            }
        });
        BHerramientasOpciones.add(BotRectangulo);

        GrupoBHerramientas.add(BotElipse);
        BotElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/elipse.png"))); // NOI18N
        BotElipse.setToolTipText("Elipse");
        BotElipse.setFocusable(false);
        BotElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotElipseActionPerformed(evt);
            }
        });
        BHerramientasOpciones.add(BotElipse);

        panelBHerramientas.add(BHerramientasOpciones, java.awt.BorderLayout.NORTH);

        BHerramientasFiguras.setBackground(new java.awt.Color(204, 204, 204));
        BHerramientasFiguras.setRollover(true);
        BHerramientasFiguras.setMaximumSize(new java.awt.Dimension(1000, 1000));
        BHerramientasFiguras.setMinimumSize(new java.awt.Dimension(41, 29));
        BHerramientasFiguras.setPreferredSize(new java.awt.Dimension(41, 35));

        jLabel8.setText("Figuras : ");
        BHerramientasFiguras.add(jLabel8);

        comboListaFiguras.setMaximumRowCount(10);
        comboListaFiguras.setModel(new javax.swing.DefaultComboBoxModel<>(new JFigura[]{}));
        comboListaFiguras.setToolTipText("Lista de figuras del mismo Lienzo");
        BHerramientasFiguras.add(comboListaFiguras);

        GrupoBHerramientas.add(BotMover);
        BotMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/seleccion.png"))); // NOI18N
        BotMover.setToolTipText("Mover figura");
        BotMover.setFocusable(false);
        BotMover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotMover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotMoverActionPerformed(evt);
            }
        });
        BHerramientasFiguras.add(BotMover);

        jLabel2.setText("  Mover Figura a  (");
        BHerramientasFiguras.add(jLabel2);

        coorX.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0"))));
        coorX.setToolTipText("coordenada X del punto a mover");
        coorX.setMinimumSize(new java.awt.Dimension(40, 30));
        coorX.setPreferredSize(new java.awt.Dimension(40, 30));
        BHerramientasFiguras.add(coorX);

        jLabel3.setText(",");
        BHerramientasFiguras.add(jLabel3);

        coorY.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0"))));
        coorY.setToolTipText("coordenada Y del punto a mover");
        coorY.setMinimumSize(new java.awt.Dimension(40, 30));
        coorY.setPreferredSize(new java.awt.Dimension(40, 30));
        BHerramientasFiguras.add(coorY);

        jLabel4.setText(")    ");
        BHerramientasFiguras.add(jLabel4);
        BHerramientasFiguras.add(jSeparator2);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/transparencia.png"))); // NOI18N
        jLabel1.setToolTipText("Transparencia");
        BHerramientasFiguras.add(jLabel1);

        sliderTransparencia.setMajorTickSpacing(1);
        sliderTransparencia.setToolTipText("Grado de transparencia");
        sliderTransparencia.setValue(100);
        sliderTransparencia.setMinimumSize(new java.awt.Dimension(30, 26));
        sliderTransparencia.setPreferredSize(new java.awt.Dimension(66, 26));
        sliderTransparencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderTransparenciaStateChanged(evt);
            }
        });
        BHerramientasFiguras.add(sliderTransparencia);
        BHerramientasFiguras.add(jSeparator8);

        jLabel7.setText("  Opciones Relleno :   ");
        BHerramientasFiguras.add(jLabel7);

        BotColorear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/rellenar.png"))); // NOI18N
        BotColorear.setToolTipText("Colorear relleno");
        BotColorear.setFocusable(false);
        BotColorear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotColorear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotColorear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotColorearActionPerformed(evt);
            }
        });
        BHerramientasFiguras.add(BotColorear);

        ComboBColoresRelleno.setModel(new javax.swing.DefaultComboBoxModel<>(new Color[] { Color.BLACK, Color.WHITE, Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW }));
        ComboBColoresRelleno.setSelectedIndex(0);
        ComboBColoresRelleno.setToolTipText("Seleccionar color del relleno");
        ComboBColoresRelleno.setMinimumSize(new java.awt.Dimension(33, 25));
        ComboBColoresRelleno.setPreferredSize(new java.awt.Dimension(55, 30));
        ComboBColoresRelleno.setRenderer(new Render());
        ComboBColoresRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBColoresRellenoActionPerformed(evt);
            }
        });
        BHerramientasFiguras.add(ComboBColoresRelleno);

        panelColorRelleno.setPreferredSize(new java.awt.Dimension(100, 30));

        paletaColoresRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/descarga_opt.jpg"))); // NOI18N
        paletaColoresRelleno.setToolTipText("Paleta colores relleno");
        paletaColoresRelleno.setFocusable(false);
        paletaColoresRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        paletaColoresRelleno.setMaximumSize(new java.awt.Dimension(27, 27));
        paletaColoresRelleno.setMinimumSize(new java.awt.Dimension(27, 27));
        paletaColoresRelleno.setPreferredSize(new java.awt.Dimension(30, 30));
        paletaColoresRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        paletaColoresRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paletaColoresRellenoActionPerformed(evt);
            }
        });

        colorSelecPaletaRelleno.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        colorSelecPaletaRelleno.setToolTipText("Color de relleno seleccionado");

        javax.swing.GroupLayout panelColorRellenoLayout = new javax.swing.GroupLayout(panelColorRelleno);
        panelColorRelleno.setLayout(panelColorRellenoLayout);
        panelColorRellenoLayout.setHorizontalGroup(
            panelColorRellenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelColorRellenoLayout.createSequentialGroup()
                .addComponent(paletaColoresRelleno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(colorSelecPaletaRelleno, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelColorRellenoLayout.setVerticalGroup(
            panelColorRellenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(paletaColoresRelleno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(colorSelecPaletaRelleno, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        BHerramientasFiguras.add(panelColorRelleno);

        jLabel5.setText("Degradado : ");
        BHerramientasFiguras.add(jLabel5);

        comboDegradado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin", "Horizontal", "Vertical", "Inclinado" }));
        comboDegradado.setToolTipText("Elegir opción de degradado");
        comboDegradado.setMinimumSize(new java.awt.Dimension(93, 26));
        comboDegradado.setPreferredSize(new java.awt.Dimension(93, 26));
        comboDegradado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDegradadoActionPerformed(evt);
            }
        });
        BHerramientasFiguras.add(comboDegradado);
        BHerramientasFiguras.add(jSeparator3);

        jLabel6.setText("  Opciones Trazo :   ");
        BHerramientasFiguras.add(jLabel6);

        ComboBColoresTrazo.setModel(new javax.swing.DefaultComboBoxModel<>(new Color[] { Color.BLACK, Color.WHITE, Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW }));
        ComboBColoresTrazo.setSelectedIndex(0);
        ComboBColoresTrazo.setToolTipText("Seleccionar color del trazo");
        ComboBColoresTrazo.setMinimumSize(new java.awt.Dimension(33, 25));
        ComboBColoresTrazo.setPreferredSize(new java.awt.Dimension(55, 30));
        ComboBColoresTrazo.setRenderer(new Render());
        ComboBColoresTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBColoresTrazoActionPerformed(evt);
            }
        });
        BHerramientasFiguras.add(ComboBColoresTrazo);

        panelTrazo.setPreferredSize(new java.awt.Dimension(105, 30));

        paletaColoresTrazo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/descarga_opt.jpg"))); // NOI18N
        paletaColoresTrazo.setToolTipText("Paleta colores trazo");
        paletaColoresTrazo.setFocusable(false);
        paletaColoresTrazo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        paletaColoresTrazo.setMaximumSize(new java.awt.Dimension(27, 27));
        paletaColoresTrazo.setMinimumSize(new java.awt.Dimension(27, 27));
        paletaColoresTrazo.setPreferredSize(new java.awt.Dimension(30, 30));
        paletaColoresTrazo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        paletaColoresTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paletaColoresTrazoActionPerformed(evt);
            }
        });

        colorSelecPaletaTrazo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        colorSelecPaletaTrazo.setToolTipText("Color de trazo seleccionado ");

        javax.swing.GroupLayout panelTrazoLayout = new javax.swing.GroupLayout(panelTrazo);
        panelTrazo.setLayout(panelTrazoLayout);
        panelTrazoLayout.setHorizontalGroup(
            panelTrazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTrazoLayout.createSequentialGroup()
                .addComponent(paletaColoresTrazo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(colorSelecPaletaTrazo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelTrazoLayout.setVerticalGroup(
            panelTrazoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(colorSelecPaletaTrazo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelTrazoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(paletaColoresTrazo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        BHerramientasFiguras.add(panelTrazo);

        GrosorSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 5, 1));
        GrosorSpinner.setToolTipText("Seleccionar grosor del trazo de la figura");
        GrosorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GrosorSpinnerStateChanged(evt);
            }
        });
        BHerramientasFiguras.add(GrosorSpinner);

        trazoDiscontinuo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/image-2019-06-13.png"))); // NOI18N
        trazoDiscontinuo.setToolTipText("Hacer / deshacer trazo discontinuo");
        trazoDiscontinuo.setFocusable(false);
        trazoDiscontinuo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        trazoDiscontinuo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        trazoDiscontinuo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trazoDiscontinuoActionPerformed(evt);
            }
        });
        BHerramientasFiguras.add(trazoDiscontinuo);

        BotAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/alisar.png"))); // NOI18N
        BotAlisar.setToolTipText("Mejorar calidad de los bordes de la figura");
        BotAlisar.setFocusable(false);
        BotAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAlisarActionPerformed(evt);
            }
        });
        BHerramientasFiguras.add(BotAlisar);

        panelBHerramientas.add(BHerramientasFiguras, java.awt.BorderLayout.CENTER);

        BHerramientasOtrosMedios.setRollover(true);

        GrupoSonido.add(BotPlay);
        BotPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/Play.png"))); // NOI18N
        BotPlay.setMnemonic('p');
        BotPlay.setToolTipText("Iniciar reproducción");
        BotPlay.setFocusable(false);
        BotPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotPlayActionPerformed(evt);
            }
        });
        BHerramientasOtrosMedios.add(BotPlay);

        GrupoSonido.add(BotPause);
        BotPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/Pausa.png"))); // NOI18N
        BotPause.setToolTipText("Pausar reproducción");
        BotPause.setFocusable(false);
        BotPause.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotPause.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotPauseActionPerformed(evt);
            }
        });
        BHerramientasOtrosMedios.add(BotPause);

        GrupoSonido.add(BotStop);
        BotStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/Stop.png"))); // NOI18N
        BotStop.setToolTipText("Detener reproducción");
        BotStop.setFocusable(false);
        BotStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotStopActionPerformed(evt);
            }
        });
        BHerramientasOtrosMedios.add(BotStop);
        BHerramientasOtrosMedios.add(jSeparator5);

        GrupoGrabacion.add(BotGrabar);
        BotGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/record24x24.png"))); // NOI18N
        BotGrabar.setToolTipText("Iniciar grabación");
        BotGrabar.setFocusable(false);
        BotGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotGrabarActionPerformed(evt);
            }
        });
        BHerramientasOtrosMedios.add(BotGrabar);

        GrupoGrabacion.add(BotPararGrabar);
        BotPararGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/stopRecord24x24.png"))); // NOI18N
        BotPararGrabar.setToolTipText("Detener grabación");
        BotPararGrabar.setFocusable(false);
        BotPararGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotPararGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotPararGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotPararGrabarActionPerformed(evt);
            }
        });
        BHerramientasOtrosMedios.add(BotPararGrabar);

        comboListaRepro.setModel(new javax.swing.DefaultComboBoxModel<>(new File[] {}));
        comboListaRepro.setToolTipText("Lista de reproducción");
        BHerramientasOtrosMedios.add(comboListaRepro);
        BHerramientasOtrosMedios.add(jSeparator6);

        BotCamara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/Camara.png"))); // NOI18N
        BotCamara.setToolTipText("Iniciar cámara");
        BotCamara.setFocusable(false);
        BotCamara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotCamara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotCamara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotCamaraActionPerformed(evt);
            }
        });
        BHerramientasOtrosMedios.add(BotCamara);

        BotCapturaCam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/Capturar.png"))); // NOI18N
        BotCapturaCam.setToolTipText("Captura de imagen");
        BotCapturaCam.setFocusable(false);
        BotCapturaCam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotCapturaCam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotCapturaCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotCapturaCamActionPerformed(evt);
            }
        });
        BHerramientasOtrosMedios.add(BotCapturaCam);

        panelBHerramientas.add(BHerramientasOtrosMedios, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panelBHerramientas, java.awt.BorderLayout.NORTH);

        BMenuArchivo.setText("Archivo");
        BMenuArchivo.setToolTipText("Opciones sobre archivos");

        menuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/nuevo.png"))); // NOI18N
        menuNuevo.setText("Nuevo");
        menuNuevo.setToolTipText("Crear un nuevo lienzo");
        menuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoActionPerformed(evt);
            }
        });
        BMenuArchivo.add(menuNuevo);

        menuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/abrir.png"))); // NOI18N
        menuAbrir.setText("Abrir");
        menuAbrir.setToolTipText("Abrir archivo existente");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        BMenuArchivo.add(menuAbrir);

        menuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IconosPFinal/guardar.png"))); // NOI18N
        menuGuardar.setText("Guardar");
        menuGuardar.setToolTipText("Guardar en un archivo");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        BMenuArchivo.add(menuGuardar);

        BarraMenu.add(BMenuArchivo);

        BMenuVer.setText("Ver");
        BMenuVer.setToolTipText("Mostrar/Ocultar barras");

        BMenuEditbarrEstado.setSelected(true);
        BMenuEditbarrEstado.setText("Ver barra de estado");
        BMenuEditbarrEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMenuEditbarrEstadoActionPerformed(evt);
            }
        });
        BMenuVer.add(BMenuEditbarrEstado);

        BMenuEditbarrPropiedades.setSelected(true);
        BMenuEditbarrPropiedades.setText("Ver barra de propiedades");
        BMenuEditbarrPropiedades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMenuEditbarrPropiedadesActionPerformed(evt);
            }
        });
        BMenuVer.add(BMenuEditbarrPropiedades);

        BMeduEditbarrSonYVi.setSelected(true);
        BMeduEditbarrSonYVi.setText("Ver barra de sonido y vídeo");
        BMeduEditbarrSonYVi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMeduEditbarrSonYViActionPerformed(evt);
            }
        });
        BMenuVer.add(BMeduEditbarrSonYVi);

        BarraMenu.add(BMenuVer);

        BMenuImagen.setText("Imagen");
        BMenuImagen.setToolTipText("Opciones sobre la imagen");

        menuResacaleOp.setText("ResacaleOp");
        menuResacaleOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuResacaleOpActionPerformed(evt);
            }
        });
        BMenuImagen.add(menuResacaleOp);

        menuConvolveOp.setText("ConvolveOp");
        menuConvolveOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvolveOpActionPerformed(evt);
            }
        });
        BMenuImagen.add(menuConvolveOp);

        menuAffineTransformOp.setText("AffineTransformOp");
        menuAffineTransformOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAffineTransformOpActionPerformed(evt);
            }
        });
        BMenuImagen.add(menuAffineTransformOp);

        menuLookupOp.setText("LookupOp");
        menuLookupOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLookupOpActionPerformed(evt);
            }
        });
        BMenuImagen.add(menuLookupOp);

        menuBandCombineOp.setText("BandCombineOp");
        menuBandCombineOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBandCombineOpActionPerformed(evt);
            }
        });
        BMenuImagen.add(menuBandCombineOp);

        menuColorConvertOp.setText("ColorConvertOp");
        menuColorConvertOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuColorConvertOpActionPerformed(evt);
            }
        });
        BMenuImagen.add(menuColorConvertOp);

        menuDuplicarImg.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        menuDuplicarImg.setText("Duplicar");
        menuDuplicarImg.setToolTipText("Duplicar imagen");
        menuDuplicarImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDuplicarImgActionPerformed(evt);
            }
        });
        BMenuImagen.add(menuDuplicarImg);

        menuReset.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuReset.setText("Reset Image");
        menuReset.setToolTipText("Reiniciar imagen");
        menuReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuResetActionPerformed(evt);
            }
        });
        BMenuImagen.add(menuReset);

        menuMilookupOp.setText("MiLookupOp");
        menuMilookupOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMilookupOpActionPerformed(evt);
            }
        });
        BMenuImagen.add(menuMilookupOp);

        BarraMenu.add(BMenuImagen);

        BMenuAyuda.setText("Ayuda");

        menuAyuAcercaDe.setText("Acerca de");
        menuAyuAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAyuAcercaDeActionPerformed(evt);
            }
        });
        BMenuAyuda.add(menuAyuAcercaDe);

        BarraMenu.add(BMenuAyuda);

        setJMenuBar(BarraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotLineaActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(TipoFormas.LINEA);
            actualizaListaFiguras(vi);
        }
        
        ActualizarEstado();
    }//GEN-LAST:event_BotLineaActionPerformed

    private void BotRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotRectanguloActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(TipoFormas.RECTANGULO);
            actualizaListaFiguras(vi);
        }
        
        ActualizarEstado();
    }//GEN-LAST:event_BotRectanguloActionPerformed

    private void BotElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotElipseActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(TipoFormas.ELIPSE);
            actualizaListaFiguras(vi);
        }
        
        ActualizarEstado();
    }//GEN-LAST:event_BotElipseActionPerformed

    private void GrosorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GrosorSpinnerStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            if (figura != null)
                figura.getTrazo().setStrokeGrosor((int)GrosorSpinner.getValue());
            else    
                vi.getLienzo().setStrokeGrosor((int)GrosorSpinner.getValue());  
        }
    }//GEN-LAST:event_GrosorSpinnerStateChanged

    private void BotNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotNuevoActionPerformed

        VentanaInternaImagen vi = new VentanaInternaImagen(this, "Nueva");
        
        // Reinicio la lista de figuras y la figura seleccionada
        if (comboListaFiguras.getItemCount() != 0) {
            comboListaFiguras.removeAllItems();
            figura = null;
        }
        
        setActivarPropiedadesFiguras(true);
        
        // Asigno por defecto el tam preferible
        int anchura = vi.getPreferredSize().width;
        int altura = vi.getPreferredSize().height;
        
        String strAnch = JOptionPane.showInputDialog(this," Indica la anchura del Lienzo [300, 3000) : ");
        
        if (strAnch != null && !strAnch.equals("")) {
            /** 
             * Documentación - Bibliografía : (4) https://www.mkyong.com/java/java-convert-string-to-int/
             */
            int provAnchura = Integer.parseInt(strAnch);
            
            if (provAnchura >= 300 && provAnchura < 3000 ) {
                anchura = provAnchura;
                String strAlt = JOptionPane.showInputDialog(this, " Ahora, indica la altura del Lienzo [250, 3000) : ");
                
                if (strAlt != null && !strAlt.equals("")) {
                    int provAltura = Integer.parseInt(strAlt);
                    
                    if (provAltura >= 250 && provAltura < 3000 )
                        altura = provAltura;
                        String strErrAlt = JOptionPane.showInputDialog(this, " [ERROR] - La Altura tiene que ser mayor o igual que 250,\n y menor que 3000. \n\n"
                                    + " Indica la altura del Lienzo : ");
                        int provAl = Integer.parseInt(strErrAlt);
                        
                        if (provAl >= 250 && provAl < 3000 )
                            altura = provAl;
                    
                } else {
                    JOptionPane.showMessageDialog(this, " Has elegido la Altura por defecto." );
                }
                
            } else {
                String strErrAnch = JOptionPane.showInputDialog(this, " [ERROR] - La Anchura tiene que ser mayor o igual que 300,\n y menor que 3000. \n\n"
                        + " Indica la anchura del Lienzo : ");
                int provAnch = Integer.parseInt(strErrAnch);
                
                if (provAnch >= 300 && provAnch < 3000) {
                    anchura = provAnch;    
                    String strAlt = JOptionPane.showInputDialog(this, " Ahora, indica la altura del Lienzo [250, 3000) : ");
                    
                    if (strAlt != null && !strAlt.equals("")) {
                        int provAltura = Integer.parseInt(strAlt);
                        
                        if (provAltura >= 250 && provAltura < 3000 )
                            altura = provAltura;
                        else {
                            String strErrAlt = JOptionPane.showInputDialog(this, " [ERROR] - La Altura tiene que ser mayor o igual que 250,\n y menor que 3000. \n\n"
                                    + " Indica la altura del Lienzo : ");
                            int provAl = Integer.parseInt(strErrAlt);
                            if (provAl >= 250 && provAl < 3000 )
                                altura = provAl;
                        }     
                    } else {
                        JOptionPane.showMessageDialog(this, " Has elegido la Altura por defecto." );
                    } 
                }
            }            
        } else {
            String strAltura = JOptionPane.showInputDialog(this, " Has elegido la Anchura por defecto.\n\n Ahora indica la altura del Lienzo : ");
        
            if (strAltura != null && !strAltura.equals("")) {
                int provAltura = Integer.parseInt(strAltura);
                
                if (provAltura >= 250 && provAltura < 3000 )
                    altura = provAltura;
                else {
                    String strErrAlt = JOptionPane.showInputDialog(this, " [ERROR] - La Altura tiene que ser mayor o igual que 30,\n y menor que 1500. \n\n"
                            + " Indica la altura del Lienzo : ");
                    int provAl = Integer.parseInt(strErrAlt);
                    if (provAl >= 250 && provAl < 3000 )
                        altura = provAl;
                }
                
            } else {
                JOptionPane.showMessageDialog(this, " También has elegido la Altura por defecto." );
            }  
        }
        
        JOptionPane.showMessageDialog(this, " La Dimensión del nuevo Lienzo es : " + anchura + " x " + altura);
        
        vi.getLienzo().iniciar();
        
        
        BufferedImage img = new BufferedImage(anchura,altura,BufferedImage.TYPE_INT_ARGB);
        img.getGraphics().getClipBounds();
        
        vi.getLienzo().setImagen(img);
        vi.getLienzo().repaint(); 
        vi.setSize(anchura+50, altura+50);
        Escritorio.add(vi);
        vi.setVisible(true);

        actualizaListaFiguras(vi);
         
        ActualizarEstado();
    }//GEN-LAST:event_BotNuevoActionPerformed

    private void BotAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        /**
         * Documentación - Bibliografía : (2) https://www.programcreek.com/java-api-examples/javax.swing.filechooser.FileNameExtensionFilter
         */
        FileNameExtensionFilter filter = new FileNameExtensionFilter( "*.jpg, *.jpeg, *.png          (IMÁGENES)", "jpg", "png", "jpeg" );
        dlg.setFileFilter(filter);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter( "*.au, *.wav, *.aif            (SONIDO)", "wav", "au", "aif");
        dlg.setFileFilter(filtro);
        FileNameExtensionFilter fil = new FileNameExtensionFilter( "*.mpg, *.mp3, *.mp4, *.avi    (VIDEOS Y TIPO VLC)", "mpg", "mp3", "mp4", "avi" );
        dlg.setFileFilter(fil);
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                String nombre = f.getName();
                String extension = getExtension(nombre);
                
                // Archivos de audio
                if ("au".equals(extension) || "wav".equals(extension)|| "aif".equals(extension) ) {               
                    boolean esta = false;
                    f = new File(f.getAbsolutePath()){
                        @Override
                        public String toString(){
                            return this.getName();
                        }
                    };
                    // Compruebo si el archivo esta ya en el combobox
                    for (int i = 0 ; i < comboListaRepro.getItemCount() ; i++)
                        if (f.getName().equals(comboListaRepro.getSelectedItem().toString()))
                            esta = true;
                    
                    if (!esta)
                        comboListaRepro.addItem(f);
                    
                    comboListaRepro.setSelectedItem(f);
                }
                else if ( "mpg".equals(extension)||"mp4".equals(extension) || "avi".equals(extension) || "mp3".equals(extension)) {
                    f = new File(f.getAbsolutePath()){
                        @Override
                        public String toString(){
                            return this.getName();
                        }
                    };

                    viVLCP = VentanaInternaVLCPlayer.getInstance(this,f);
                    viVLCP.addMediaPlayerEventListener(new VideoListener());
                    Escritorio.add(viVLCP);
                    viVLCP.setTitle(f.getName());
                    viVLCP.setVisible(true);
                    JOptionPane.showMessageDialog(this, "INFO: Para reproducir, pulsa el botón de Play.");
                    BotGuardar.setEnabled(false);
                }
                else { // Archivos Imagenes
                    VentanaInternaImagen vi = new VentanaInternaImagen(this, "Nueva Imagen");
                    imgReset = ImageIO.read(f);
                    bufferedImg = imgReset;
                    vi.getLienzo().setImagen(bufferedImg);
                    Escritorio.add(vi);
                    Escritorio.setSelectedFrame(vi);
                    int tipoEspacioColor = bufferedImg.getColorModel().getColorSpace().getType();       
                    
                    // Para asignar el espacio de color en el titulo de la ventana
                    switch (tipoEspacioColor){ 
                        case 5:
                            vi.setTitle(f.getName() + "     {TYPE_RGB}");
                            break;
                        case 6:
                            vi.setTitle(f.getName() + "     {TYPE_GRAY}");
                            break;
                        case 1000:
                            vi.setTitle(f.getName() + "     {CS_sRGB}");
                            break;
                        case 1002:
                            vi.setTitle(f.getName() + "     {CS_PYCC}");
                            break;
                        case 1003:
                            vi.setTitle(f.getName() + "     {CS_GRAY}");
                            break;
                        case 1004:
                            vi.setTitle(f.getName() + "     {CS_LINEAR_RGB}");
                            break;
                    }        
                    
                    vi.setVisible(true);
                    actualizaListaFiguras(vi);
                    setActivarPropiedadesFiguras(true);
                }
            }catch(Exception ex){
                JOptionPane.showMessageDialog(this, "Error al abrir el archivo");
            }
        }
        ActualizarEstado();
    }//GEN-LAST:event_BotAbrirActionPerformed

    private void BotGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotGuardarActionPerformed
        VentanaInternaImagen vi=(VentanaInternaImagen) Escritorio.getSelectedFrame();
        
        if (vi != null) {
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            
            FileNameExtensionFilter filter = new FileNameExtensionFilter( "*.jpg, *.jpeg, *.png          (IMÁGENES)", "jpg", "png", "jpeg" );
            dlg.setFileFilter(filter);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    bufferedImg = vi.getLienzo().getImagen();
                    if (bufferedImg != null) {
                        File f = dlg.getSelectedFile();
                        String nombre = f.getName();
                        String extension = getExtension(nombre);
                        
                        if ("jpg".equals(extension))
                            ImageIO.write(bufferedImg, "jpg", f);
                        else if ("png".equals(extension))
                            ImageIO.write(bufferedImg, "png", f);
                        else if ("jpeg".equals(extension))
                            ImageIO.write(bufferedImg, "jpeg", f);
                        else 
                            JOptionPane.showMessageDialog(this, "[ERROR] - Extensión inexistente.\nHas guardado la imagen sin extensión,\n"
                                    + "por lo que se ha guardado de la siguiente manera : " + f.getName());
                        
                        vi.setTitle(f.getName());
                        
                    }
                }catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_BotGuardarActionPerformed

    private void BotColorearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotColorearActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            ComboBColoresRelleno.setEnabled(true);
            paletaColoresRelleno.setEnabled(true);
            vi.getLienzo().setRelleno(BotColorear.isSelected());
        }else
            BotColorear.setSelected(false);
        
        ActualizarEstado();
    }//GEN-LAST:event_BotColorearActionPerformed

    private void BotMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotMoverActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        
        if (vi != null) {
            vi.getLienzo().setMover(BotMover.isSelected());
            editar = BotMover.isSelected();
            vi.getLienzo().setEditar(editar);
            
            if (editar) {
                
                BotLinea.setSelected(false);
                BotRectangulo.setSelected(false);
                BotElipse.setSelected(false);
                
                if (comboListaFiguras.getItemCount() != 0) {
                    
                    if (!coorX.getText().equals("") || !coorY.getText().equals("")) {  
                        
                        int provX = Integer.parseInt(coorX.getText());
                        int provY = Integer.parseInt(coorY.getText());
                        
                        int X = (int)((JFigura)comboListaFiguras.getSelectedItem()).getLocation().getX();
                        int Y = (int)((JFigura)comboListaFiguras.getSelectedItem()).getLocation().getY();
                        
                        if (provX >= 0 && provX <= vi.getLienzo().getSize().width) {
                            X = provX;
                        }
                        else
                            JOptionPane.showMessageDialog(this, " ERROR :\n La coordenada X se sale del Lienzo,\n por lo que la posición X se mantiene.");
                        
                        if (provY >= 0 && provY <= vi.getLienzo().getSize().height) {
                            Y = provY;
                        }
                        else
                            JOptionPane.showMessageDialog(this, " ERROR :\n La coordenada Y se sale del Lienzo,\n por lo que la posición Y se mantiene.");
                        
                        Point2D nuevoPunto = new Point (X,Y);
                        figura = ((JFigura)comboListaFiguras.getSelectedItem());
                        System.out.println(" MOVER VENTANA PRINCIPAL, Valor del nuevo punto : (" + nuevoPunto.getX()+ ","+nuevoPunto.getY()+")");
                        figura.setLocation(nuevoPunto);
                        vi.getLienzo().repaint();
                        
                    } else
                        JOptionPane.showMessageDialog(this, "Primero, indica las coordenadas, y después vuelve a pulsar el botón de mover");
                
                } else
                    JOptionPane.showMessageDialog(this, " ERROR :\n No hay ninguna figura para mover.");
            }
        }
        else
            //BotMover.setSelected(false);
            JOptionPane.showMessageDialog(this, " Primero, indica las coordenadas, y después vuelve a pulsar el botón de mover");
        
        ActualizarEstado();
    }//GEN-LAST:event_BotMoverActionPerformed

    private void ComboBColoresTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBColoresTrazoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        Color co = (Color)ComboBColoresTrazo.getSelectedItem();
        // Panel que indica el color seleccionado
        colorSelecPaletaTrazo.setBackground(co); 
        
        if (vi != null) {
            
            if (editar/*comboListaFiguras.getItemCount() != 0*/) { // Editar
                figura = ((JFigura)comboListaFiguras.getSelectedItem());
                figura.getTrazo().setColor(co);
            
            } else // Crear
                vi.getLienzo().setColorTrazo(co);
        }
        ActualizarEstado();
    }//GEN-LAST:event_ComboBColoresTrazoActionPerformed

    private void BotAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAlisarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            
            if (editar/*comboListaFiguras.getItemCount() != 0*/) { // Editar
                figura = ((JFigura)comboListaFiguras.getSelectedItem());
                figura.getTrazo().setAlisado(BotAlisar.isSelected());
                figura.getTrazo().setRender(BotAlisar.isSelected());
            } else // Crear
                vi.getLienzo().setAlisado(BotAlisar.isSelected());
        }
        ActualizarEstado();
    }//GEN-LAST:event_BotAlisarActionPerformed

    private void menuResacaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuResacaleOpActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();   
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            if(imgSource!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(imgSource, vi.getLienzo().getImagen()); 
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menuResacaleOpActionPerformed

    private void SliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderBrilloFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if(vi != null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
            bufferedImg = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_SliderBrilloFocusGained

    private void SliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderBrilloFocusLost
        SliderBrillo.setValue(0);
    }//GEN-LAST:event_SliderBrilloFocusLost

    private void SliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderBrilloStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            if(bufferedImg!=null){
                try{
                    BufferedImage imgOut = vi.getLienzo().getImagen();
                    RescaleOp rop = new RescaleOp(1.0F, SliderBrillo.getValue(), null);
                    rop.filter(bufferedImg, imgOut);
                    // Para utilidades de Rehacer y Deshacer
//                    secuenciaImagenes.add(imgOut);
//                    contadorImg++;
                    vi.getLienzo().repaint();
                    
                } catch(IllegalArgumentException e){
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_SliderBrilloStateChanged

    private void ComboFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboFiltroActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();
//            imgDeshacer = bufferedImg;
//            // Para utilidades de Rehacer y Deshacer
//            secuenciaImagenes.add(bufferedImg);
//            contadorImg++;
            if (bufferedImg!=null) {
                try{
                    Kernel k = null;
                
                    switch(ComboFiltro.getSelectedIndex()){
                        case 0: // emborronamiento media
                            k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                            break;
                        case 1: // emborronamiento binomial
                            k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                            break;
                        case 2: // enfoque
                            k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                            break;
                        case 3: // relieve
                            k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                            break;
                        case 4: // detector fronteras laplaciano
                            k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                            break;
                    }
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgout = cop.filter(bufferedImg, null);
                    vi.getLienzo().setImagen(imgout); 
                    vi.getLienzo().repaint();
                    
                } catch(IllegalArgumentException e){
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ComboFiltroActionPerformed

    private void botSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botSepiaActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                SepiaOp sepia = new SepiaOp();
                sepia.filter(bufferedImg, bufferedImg);
                vi.getLienzo().setImagen(bufferedImg);
                vi.getLienzo().repaint();
                
            }catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botSepiaActionPerformed

    private void botEscalaMasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botEscalaMasActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                AffineTransformOp atop;
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgOut = atop.filter(bufferedImg, null);

                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botEscalaMasActionPerformed

    private void botEscalaMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botEscalaMenosActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                AffineTransformOp atop;
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgOut = atop.filter(bufferedImg, null);

                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botEscalaMenosActionPerformed

    private void menuAffineTransformOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAffineTransformOpActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen();
            
            AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
            AffineTransformOp op;
            op = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR );
            
            BufferedImage imgOut = op.filter(img, null);
            vi.getLienzo().setImagen(imgOut);
            vi.getLienzo().repaint();      
        }
    }//GEN-LAST:event_menuAffineTransformOpActionPerformed

    private void menuLookupOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLookupOpActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) Escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen();
            LookupTable lookta = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
            LookupOp lookp = new LookupOp(lookta, null);
            BufferedImage imgOut = lookp.filter(img, null);
            vi.getLienzo().setImagen(imgOut);
            vi.getLienzo().repaint();
        }
    }//GEN-LAST:event_menuLookupOpActionPerformed

    private void menuConvolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvolveOpActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen();
            if(img!=null){
                try{
                    Kernel k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                    ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage imgOut = cop.filter(img, null);
                    vi.getLienzo().setImagen(imgOut);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menuConvolveOpActionPerformed

    private void botContrastNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botContrastNormalActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                LookupTable lookta = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                LookupOp lookp = new LookupOp(lookta, null);
                BufferedImage imgOut = lookp.filter(bufferedImg, null);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();   
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botContrastNormalActionPerformed

    private void botContrastIluminacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botContrastIluminacionActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                LookupTable lookta = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
                LookupOp lookp = new LookupOp(lookta, null);
                BufferedImage imgOut = lookp.filter(bufferedImg, null);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint(); 
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botContrastIluminacionActionPerformed

    private void botContrastOscureciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botContrastOscureciActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                LookupTable lookta = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                LookupOp lookp = new LookupOp(lookta, null);
                BufferedImage imgOut = lookp.filter(bufferedImg, null);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();   
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botContrastOscureciActionPerformed

    private void botSinusoidalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botSinusoidalActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try{
                LookupTable lt = seno(180.0f/255.0f);
                LookupOp lop = new LookupOp(lt, null);
                BufferedImage imgOut = lop.filter(bufferedImg, bufferedImg);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }   
        
    }//GEN-LAST:event_botSinusoidalActionPerformed

    private void botRot90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botRot90ActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                double r = Math.toRadians(90);
                Point c = new Point(bufferedImg.getWidth()/2, bufferedImg.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
                AffineTransformOp atop;
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgOut = atop.filter(bufferedImg, null);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botRot90ActionPerformed

    private void botRot180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botRot180ActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                double r = Math.toRadians(180);
                Point c = new Point(bufferedImg.getWidth()/2, bufferedImg.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
                AffineTransformOp atop;
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgOut = atop.filter(bufferedImg, null);   
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botRot180ActionPerformed

    private void botRot270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botRot270ActionPerformed
       VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                double r = Math.toRadians(270);
                Point c = new Point(bufferedImg.getWidth()/2, bufferedImg.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
                AffineTransformOp atop;
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgOut = atop.filter(bufferedImg, null);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botRot270ActionPerformed

    private void menuDuplicarImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDuplicarImgActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen();
            
            try {
                VentanaInternaImagen viN = new VentanaInternaImagen(this, "Copia " + vi.getTitle());
                Escritorio.add(viN);
                viN.setVisible(true);
                viN.getLienzo().setImagen(img);
                viN.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_menuDuplicarImgActionPerformed

    private void botContrastNegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botContrastNegActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();
            
            try {
                LookupTable lookta = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                LookupOp lookp = new LookupOp(lookta, null);
                BufferedImage imgOut = lookp.filter(bufferedImg, null);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();  
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botContrastNegActionPerformed

    private void menuBandCombineOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBandCombineOpActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen(); 
            int totalbandas = bufferedImg.getColorModel().getNumColorComponents();
            
            for (int i = 0 ; i < totalbandas; i++) {
                VentanaInternaImagen viN = new VentanaInternaImagen(this, "Nuevo Lienzo {Banda " + bufferedImg.getColorModel().getColorSpace().getName(i) + "}");
                BufferedImage imgOut = getBanda(bufferedImg, i);
                viN.getLienzo().setImagen(imgOut);
                viN.getLienzo().repaint();
                Escritorio.add(viN);
                viN.setVisible(true);
            }
        }
    }//GEN-LAST:event_menuBandCombineOpActionPerformed

    private void menuColorConvertOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuColorConvertOpActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();
            
            try {
                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                ColorConvertOp cop = new ColorConvertOp(cs, null);
                BufferedImage imgOut = cop.filter(bufferedImg, null);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch ( IllegalArgumentException e) {
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_menuColorConvertOpActionPerformed

    private void botBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botBandasActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen(); 

            try {
                int totalbandas = bufferedImg.getColorModel().getNumColorComponents();

                for (int i = 0 ; i < totalbandas; i++) {
                    VentanaInternaImagen viN = new VentanaInternaImagen(this, "Nuevo Lienzo {Banda " + bufferedImg.getColorModel().getColorSpace().getName(i) + "}");
                    BufferedImage imgOut = getBanda(bufferedImg, i);
                    viN.getLienzo().setImagen(imgOut);
                    Escritorio.add(viN);
                    viN.setVisible(true);
                    viN.getLienzo().repaint();
                    Escritorio.repaint();
                }
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botBandasActionPerformed

    private void ComboEspacioColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboEspacioColoresActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();
            
            try {
                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);

                if (ComboEspacioColores.getSelectedIndex() == 0)
                    cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                else if (ComboEspacioColores.getSelectedIndex() == 1)
                    cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                else if (ComboEspacioColores.getSelectedIndex() == 2)
                    cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);

                ColorConvertOp cop = new ColorConvertOp(cs, null);
                BufferedImage imgOut = cop.filter(bufferedImg, null);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }     
    }//GEN-LAST:event_ComboEspacioColoresActionPerformed

    private void botTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botTintadoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();
            JOptionPane.showMessageDialog(this, "Seleccione el color en la paleta asociada al trazo.");
            try {
                TintOp tintado = new TintOp((Color)colorSelecPaletaTrazo.getBackground(),0.5f);
                tintado.filter(bufferedImg, bufferedImg);
                vi.getLienzo().setImagen(bufferedImg);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botTintadoActionPerformed

    private void botEcualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botEcualizarActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                // Primero paso la imagen original a YCC que separa la intensidad de la
                // info cromática
                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                ColorConvertOp cop = new ColorConvertOp(cs, null);
                BufferedImage imgOut = cop.filter(bufferedImg, null);
                // Aplico la ecualizacion en la intensidad
                EqualizationOp ecualizacion = new EqualizationOp();
                ecualizacion.filter(imgOut, imgOut);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botEcualizarActionPerformed

    private void sliderUmbralStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderUmbralStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen();
            if(img!=null){ 
                try{
                    umbral = new UmbralizacionOp(sliderUmbral.getValue());
                    
                    if (botUmbralGrises.isSelected())
                        umbral.setTipo(1);
                    else if (botUmbralInvertido.isSelected())
                        umbral.setTipo(2);
                    else if (botUmbralColor.isSelected()) {
                        umbral.setTipo(3);
                        umbral.setColor((Color)ComboBColoresTrazo.getSelectedItem());
                    }
                    
                    // Tengo que asegurarme de que esta en RGB, para que no de NullPointer
                    if (img.getColorModel().getColorSpace().isCS_sRGB()) {
                        BufferedImage nuevaImg = umbral.filter(bufferedImg, null);
                        vi.getLienzo().setImagen(nuevaImg);
                        vi.getLienzo().repaint();
                    }
                } catch(IllegalArgumentException e){
                    JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderUmbralStateChanged

    private void sliderUmbralFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if(vi!=null){
            umbral = new UmbralizacionOp(sliderUmbral.getValue());
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
            bufferedImg = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_sliderUmbralFocusGained

    private void sliderUmbralFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderUmbralFocusLost
        sliderUmbral.setValue(50);
    }//GEN-LAST:event_sliderUmbralFocusLost

    private void menuResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuResetActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) 
            try {
                ResetImg(vi, imgReset);
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
    }//GEN-LAST:event_menuResetActionPerformed

    private void BotPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotPlayActionPerformed
        if (viVLCP != null) {
            viVLCP = (VentanaInternaVLCPlayer)Escritorio.getSelectedFrame();
            File f = viVLCP.getfMedia();
            viVLCP.setfMedia(f);
            viVLCP.play();               
        } else { 
            File f = (File)comboListaRepro.getSelectedItem();
            if (player == null) {
                player = new SMClipPlayer(f);
                player.addLineListener(new ManejadorAudio());
                player.play();
            } else if (pausa) {
                player.resume();
                pausa = false;
            }
        }       
    }//GEN-LAST:event_BotPlayActionPerformed

    private void BotStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotStopActionPerformed
        if (viVLCP != null) {
            viVLCP.stop();
        }else
            if (player != null) {
                player.stop();
                player = null;
            }
    }//GEN-LAST:event_BotStopActionPerformed

    private void BotPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotPauseActionPerformed
        if (player != null) {
            player.pause();
            pausa = true;
        }  
    }//GEN-LAST:event_BotPauseActionPerformed

    private void BotGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotGrabarActionPerformed
        try {
            // Grabo en un archivo temporal
            // No esta en la lista de reproduccion
            /**
             * Documentación - Bibliografía : (3) http://lineadecodigo.com/java/crear-un-fichero-temporal-con-java/
             */
            tempFile = File.createTempFile("temporal",null);
            recorder = new SMSoundRecorder(tempFile);
            recorder.addLineListener(new ManejadorGrabadora());
            recorder.record();
            
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_BotGrabarActionPerformed

    private void BotPararGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotPararGrabarActionPerformed
        if (tempFile != null) {
            try {
                recorder.stop();

                JFileChooser dlg = new JFileChooser();
                FileNameExtensionFilter filtro = new FileNameExtensionFilter( "*.au, *.wav, *.aif            (SONIDO)", "wav", "au", "aif");
                dlg.setFileFilter(filtro);
                // Para que se muestre la ventana del diálogo
                int resp = dlg.showSaveDialog(this);
                
                String nombre = dlg.getSelectedFile().getName();
                String extension = getExtension(nombre);
                        
                if ("au".equals(extension) || "wav".equals(extension) || "aif".equals(extension)) {
                    // Asigno el fichero guardado al temporal
                    tempFile.renameTo(dlg.getSelectedFile());
                    // Le cambio el nombre al asignado a la hora de guardarlo
                    tempFile = new File(dlg.getSelectedFile().getAbsolutePath()){
                        @Override
                        public String toString(){
                            return this.getName();
                        }
                    };
                    comboListaRepro.addItem(tempFile);
                } else 
                    JOptionPane.showMessageDialog(this, "[ERROR] - Extensión inexistente.\n          Has guardado la grabación sin extensión,\n          "
                            + "por lo que no se ha podido guardar el fichero temporal : " + tempFile.getName() + "\n          Además del nombre debes añadir :"
                            + "\n          .au, .wav, o .aif");
                
            }catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al guardar la grabación");
            }
        }
    }//GEN-LAST:event_BotPararGrabarActionPerformed

    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        BotNuevoActionPerformed(evt);
    }//GEN-LAST:event_menuNuevoActionPerformed

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        BotAbrirActionPerformed(evt);
    }//GEN-LAST:event_menuAbrirActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        BotGuardarActionPerformed(evt);
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if(vi != null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
            bufferedImg = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            try{     
                double r = Math.toRadians(sliderRotacion.getValue());
                Point c = new Point(bufferedImg.getWidth()/2, bufferedImg.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r,c.x,c.y);
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                // Siguiendo los consejos del pdf de la P10 superíndice 6
                BufferedImage nuevaImg = new BufferedImage(bufferedImg.getWidth(),bufferedImg.getHeight(),BufferedImage.TYPE_INT_ARGB);
                // pasamos la nueva imagen creada para que no se pierdan las dimensiones
                BufferedImage imgOut = atop.filter(bufferedImg, nuevaImg);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void BotCapturaCamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotCapturaCamActionPerformed
        VentanaInterna vi = (VentanaInterna)Escritorio.getSelectedFrame();
        if (vi != null || viVLCP != null) {
            VentanaInternaImagen viN = new VentanaInternaImagen(this, "Captura");
            // Primero distingo que VentanaInterna estoy manejando
            if (vi.getType() == 2) 
                bufferedImg = vi.getImage();
            else if (vi.getType() == 3)
                bufferedImg = viVLCP.getImage();
            
            imgReset = bufferedImg;
            // Inserto el mismo código de duplicarImagen adaptandolo a la captura
            try {
                Escritorio.add(viN);
                viN.setVisible(true);
                // Añado la imagen capturada en la otra ventana
                viN.getLienzo().setImagen(bufferedImg); 
                viN.getLienzo().repaint();
                ActualizarEstado();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }      
    }//GEN-LAST:event_BotCapturaCamActionPerformed

    private void BotCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotCamaraActionPerformed
        VentanaInternaCamara viC = VentanaInternaCamara.getInstance(this);
        try {
            Escritorio.add(viC);
            viC.setVisible(true);
            Escritorio.setSelectedFrame(viC);
            BotGuardar.setEnabled(false);
            ActualizarEstado();
        } catch(IllegalArgumentException e){
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }  
    }//GEN-LAST:event_BotCamaraActionPerformed

    private void menuAyuAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAyuAcercaDeActionPerformed
        JOptionPane.showMessageDialog(this," MI APLICACIÓN MULTIMEDIA\n\n Año: 2019\n Versión: Julio 2019\n Autor: Jesús Ruiz Castellano");
    }//GEN-LAST:event_menuAyuAcercaDeActionPerformed

    private void sliderTransparenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTransparenciaStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();

        if (vi != null) {
            if (editar/*comboListaFiguras.getItemCount() != 0*/) { // Editar
                figura = ((JFigura)comboListaFiguras.getSelectedItem());
                // Nuevo paso, compruebo que esta en el lienzo
                vi.getLienzo().setSelectedJFigura(figura);
                figura = vi.getLienzo().getSelectedJFigura();
                // Puede ser que tenga que hacerlo con el relleno igual
                figura.getTrazo().setGradotransparencia(sliderTransparencia.getValue());
            } else // Crear
                vi.getLienzo().setTransparencia(sliderTransparencia.getValue());
        }
        ActualizarEstado();
    }//GEN-LAST:event_sliderTransparenciaStateChanged

    private void botUmbralGrisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botUmbralGrisesActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();

        if (vi != null) {
            sliderUmbral.setEnabled(true);
            umbral = new UmbralizacionOp(sliderUmbral.getValue());
            umbral.setTipo(1);
            JOptionPane.showMessageDialog(this, " UMBRAL \n Ahora selecciona el grado de Umbralización.");   
        } else
            JOptionPane.showMessageDialog(this, "ERROR : Primero debe de haber una imagen.");
    }//GEN-LAST:event_botUmbralGrisesActionPerformed

    private void botUmbralInvertidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botUmbralInvertidoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();

        if (vi != null) {
            sliderUmbral.setEnabled(true);
            umbral = new UmbralizacionOp(sliderUmbral.getValue());
            umbral.setTipo(2);
            JOptionPane.showMessageDialog(this, " UMBRAL INVERSO \n Ahora selecciona el grado de Umbralización inversa.");  
        } else
            JOptionPane.showMessageDialog(this, "ERROR : Primero debe de haber una imagen.");
    }//GEN-LAST:event_botUmbralInvertidoActionPerformed

    private void botUmbralColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botUmbralColorActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();

        if (vi != null) {
            sliderUmbral.setEnabled(true);
            umbral = new UmbralizacionOp(sliderUmbral.getValue());
            umbral.setTipo(3);
            JOptionPane.showMessageDialog(this, " UMBRAL EN COLOR\n Selecciona el color arriba.\n Por defecto está en negro.");
        } else
            JOptionPane.showMessageDialog(this, "ERROR : Primero debe de haber una imagen.");
    }//GEN-LAST:event_botUmbralColorActionPerformed

    private void trazoDiscontinuoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trazoDiscontinuoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            
            if (editar/*comboListaFiguras.getItemCount() != 0*/) { // Editar
                figura = ((JFigura)comboListaFiguras.getSelectedItem());
                figura.getTrazo().setStrokeGrosor((int)GrosorSpinner.getValue());
                figura.getTrazo().setEsDiscontinuo(trazoDiscontinuo.isSelected());
            } else { // Crear
                System.out.println("    ENTRA EN CREAR DISCONTINUO *************************** ");
                vi.getLienzo().setEsDiscont(trazoDiscontinuo.isSelected()); 
                vi.getLienzo().setStrokeGrosor((int)GrosorSpinner.getValue());
                System.out.println("    esDIscontinuo = " + vi.getLienzo().getTrazo().esDiscontinuo());
            }
        }
    }//GEN-LAST:event_trazoDiscontinuoActionPerformed

    private void paletaColoresTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paletaColoresTrazoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        
        if (vi != null){
            ElegirColor dialogo = new ElegirColor(this, true);
            dialogo.setColor(vi.getLienzo().getColorTrazo());
            dialogo.setVisible(true);
            
            if(dialogo.isAplicado()){
                colorSelecPaletaTrazo.setBackground(dialogo.getColor());
                
                if (editar/*comboListaFiguras.getItemCount() != 0*/) { // Editar
                    figura = ((JFigura)comboListaFiguras.getSelectedItem());
                    figura.getTrazo().setColor(dialogo.getColor());
                } else // Crear
                    vi.getLienzo().setColorTrazo(dialogo.getColor());
            }
            else{
                colorSelecPaletaTrazo.setBackground(vi.getLienzo().getColorTrazo());
            }
            
            repaint();
        }
    }//GEN-LAST:event_paletaColoresTrazoActionPerformed

    private void ComboBColoresRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBColoresRellenoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        
        if (BotColorear.isSelected()) {
            Color co = (Color)ComboBColoresRelleno.getSelectedItem();
            colorSelecPaletaRelleno.setBackground(co);
            if (vi != null)
                vi.getLienzo().setColorFrente(co);
        }else
            JOptionPane.showMessageDialog(this, "ERROR : Primero selecciona el botón de colorear el relleno.");
        
        ActualizarEstado();
    }//GEN-LAST:event_ComboBColoresRellenoActionPerformed

    private void paletaColoresRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paletaColoresRellenoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        
        if (vi != null){
            ElegirColor dialogo = new ElegirColor(this, true);
            dialogo.setColor(vi.getLienzo().getColorFrente());
            dialogo.setVisible(true);
            
            if(dialogo.isAplicado()){
                colorSelecPaletaRelleno.setBackground(dialogo.getColor());
                
                if (comboListaFiguras.getItemCount() != 0) { // Editar
                    figura = ((JFigura)comboListaFiguras.getSelectedItem());
                    
                    Point2D uno, dos;
                    if ("rectangulo".equals(figura.getTipoFigura())) { // RECTANGULO
                        
                        if (comboDegradado.getSelectedIndex() == 0) { // Sin degradado
                            ((JRectangulo)figura).getRelleno().setColorFrente(dialogo.getColor());
                            ((JRectangulo)figura).getRelleno().setColorFondo(dialogo.getColor());
                            ((JRectangulo)figura).getRelleno().setTipoDegradado(comboDegradado.getSelectedIndex());
                        }
                     
                    }else if ("elipse".equals(figura.getTipoFigura())){ // ELIPSE
                        ((JElipse)figura).getRelleno().setColorFrente(dialogo.getColor());
                        ((JElipse)figura).getRelleno().setColorFondo(dialogo.getColor());
                        ((JElipse)figura).getRelleno().setTipoDegradado(comboDegradado.getSelectedIndex());
                    }
                // ARREGLAR    
                } else {// Crear
                    if (comboDegradado.getSelectedIndex() == 0) { // Sin degradado
                        vi.getLienzo().setColorFrente(dialogo.getColor());
                        vi.getLienzo().setColorFondo(dialogo.getColor());
                    }
                }
            }
            else{
                colorSelecPaletaTrazo.setBackground(vi.getLienzo().getColorTrazo());
            }
            
            repaint();
        }
    }//GEN-LAST:event_paletaColoresRellenoActionPerformed

    private void comboDegradadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDegradadoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        
        if (vi != null) {
            vi.getLienzo().setTipoDegradado(comboDegradado.getSelectedIndex());
            
            if (comboDegradado.getSelectedIndex() != 0) {
                JOptionPane.showMessageDialog(this, "Ahora elige el color de fondo del degradado");
                ElegirColor dialogo = new ElegirColor(this, true);
                dialogo.setColor(vi.getLienzo().getColorFondo());
                dialogo.setVisible(true);
                
                if(dialogo.isAplicado()){
                    vi.getLienzo().setColorFondo(dialogo.getColor());
                }
            }
        }
        
    }//GEN-LAST:event_comboDegradadoActionPerformed

    private void BMenuEditbarrPropiedadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMenuEditbarrPropiedadesActionPerformed
        BHerramientasFiguras.setVisible(!BHerramientasFiguras.isVisible());
    }//GEN-LAST:event_BMenuEditbarrPropiedadesActionPerformed

    private void BMenuEditbarrEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMenuEditbarrEstadoActionPerformed
        PanelBEstado.setVisible(!PanelBEstado.isVisible());
    }//GEN-LAST:event_BMenuEditbarrEstadoActionPerformed

    private void BMeduEditbarrSonYViActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMeduEditbarrSonYViActionPerformed
        BHerramientasOtrosMedios.setVisible(!BHerramientasOtrosMedios.isVisible());
    }//GEN-LAST:event_BMeduEditbarrSonYViActionPerformed

    private void menuMilookupOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMilookupOpActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo().getImagen();

            try{
                LookupTable lt = miLookupOp(180.0f/255.0f);
                LookupOp lop = new LookupOp(lt, null);
                BufferedImage imgOut = lop.filter(img, bufferedImg);
                vi.getLienzo().setImagen(imgOut);
                vi.getLienzo().repaint();
            } catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_menuMilookupOpActionPerformed

    private void botMiOpPPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botMiOpPPActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                MiOpPP miPP = new MiOpPP();
                miPP.filter(bufferedImg, bufferedImg);
                vi.getLienzo().setImagen(bufferedImg);
                vi.getLienzo().repaint();
                
            }catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botMiOpPPActionPerformed

    private void botMiOpCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botMiOpCCActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)Escritorio.getSelectedFrame();
        if (vi != null) {
            bufferedImg = vi.getLienzo().getImagen();

            try {
                MiOpCC miCC = new MiOpCC();
                miCC.filter(bufferedImg, bufferedImg);
                vi.getLienzo().setImagen(bufferedImg);
                vi.getLienzo().repaint();
                
            }catch(IllegalArgumentException e){
                JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_botMiOpCCActionPerformed


// --------------------------------- PROPIAS -----------------------------------

    /**
     * Función para actualizar la lista de figuras en función del Lienzo que 
     * esté activado.
     * @param vi : ventana interna que contiene el Lienzo con las figuras que
     *             voy a añadir a la lista
     */
    public void actualizaListaFiguras (VentanaInternaImagen vi) {
        // Añado las figuras al combobox de figuras
        // Misma forma de proceder que en el Lienzo
        vFiguras = vi.getLienzo().getvFiguras();
        
        boolean esta = false;

            for (int i = 0 ; i < vFiguras.size() ; i++ ) {
                figura = vFiguras.get(i);
                
                if (!esta)
                    comboListaFiguras.addItem(figura);
                
                for (int j = i+1 ; j < comboListaFiguras.getItemCount() ; j++)
                    // Para acceder a la pos(i) del combo se usa getItemAt(i)
                    if (comboListaFiguras.getItemAt(i) == figura) 
                        esta = true;
                       
                    //System.out.println(" (2) FIGURA CREADA y AÑADIDA ----> " + figura);
            }
    }
    
    /**
     * Funcion para tener sincronizadas las diferentes ventanas internas y, de este
     * modo, que conserven los valores de las distintas caracteristicas
     * @param grosor : valor del spinner correspondiente al grosor
     * @param forma : tipo de forma seleccionada
     * @param relleno : valor de la variable correspondiente a colorear
     * @param transparencia : valor del slider de transparencia
     * @param alisar : valor correspondiente a la variable alisar
     * @param mover : valor correspondiente a si se mueve o no la figura
     */
    public void ActualizarVInterna (int grosor, TipoFormas forma, boolean relleno, boolean transparencia, boolean alisar, boolean mover) {
    
        GrosorSpinner.setValue(grosor);
        java.awt.event.ActionEvent evt = null;
        
        switch(forma) {
            case LINEA:
                //BotLineaActionPerformed(evt);
                BotLinea.setSelected(true);
                break;
            case RECTANGULO:
                //BotRectanguloActionPerformed(evt);
                BotRectangulo.setSelected(true);
                break;
            case ELIPSE:
                //BotElipseActionPerformed(evt);
                BotElipse.setSelected(true);
                break;
        }
        
        this.BotColorear.setSelected(relleno);
        this.sliderTransparencia.setValue(sliderTransparencia.getValue());
        this.BotAlisar.setSelected(alisar);
        this.BotMover.setSelected(mover);
    }
    
    /**
     * Muestra un mensaje, en la barra inferior de la Ventana Principal,
     * en el que se da información acerca del estado de dicha ventana : si hay o no un Lienzo abierto, 
     * si se ha seleccionado algun tipo de forma para dibujar, etcétera.
     */
    public void ActualizarEstado () {
        
        VentanaInterna vi = (VentanaInterna)Escritorio.getSelectedFrame();
        String Salida = "";
        String caso = "";
        
        if (vi == null) {
            caso = "    Escritorio vacío : Abra un nuevo Lienzo o archivo para comenzar.";
            //ReiniciarValores();
        }
        else {
            if (vi.getType() == 1) {
                
                VentanaInternaImagen viI = (VentanaInternaImagen)vi;
                
                int estado = viI.getLienzo().getNumEstado();
                String inicial = "    NUEVO LIENZO   ";

                if (viI.getLienzo().isMover()) 
                    Salida = "  |    Mover objeto ";
                
                if (bufferedImg != null)
                    Salida = "  |    Imágen : " + viI.getTitle() + " ";

                switch (estado) {

                    case 0:
                        caso = inicial + Salida + "  |    Punto ";
                        break;
                    case 1:
                        caso = inicial + Salida + "  |    Línea ";
                        break;
                    case 2:
                        caso = inicial + Salida + "  |    Rectángulo vacío ";
                        break;
                    case 3:
                        caso = inicial + Salida + "  |    Rectángulo relleno ";
                        break;
                    case 4:
                        caso = inicial + Salida + "  |    Elipse vacía ";
                        break;
                    case 5:
                        caso = inicial + Salida + "  |    Elipse rellena ";
                        break;
                }
                //if ((int)vi.getPunto().getX() != -10)  
                    //estadoPunto.setText("   (" + (int)viI.getPuntoMov().getX() + "," + (int)viI.getPuntoMov().getY() + ")  ");
            }
            else if (vi.getType() == 2) {
                caso = "    Nueva VentanaInternaCámara abierta";
            }
            
            else if (vi.getType() == 3) {
                VentanaInternaVLCPlayer viV = (VentanaInternaVLCPlayer)vi;
                caso = "    Nuevo vídeo para reproducir : " + viV.getTitle();
            }
            
        } 
    
        BarraEstado.setText(caso);
    }
    
    /**
     * Calcula la tabla de bits, byte a byte, fila a fila, y a cada uno de ellos
     * le calcula el seno del valor absoluto del numero pasado como parámetro y 
     * el valor del bit en el que se encuentra.
     * @param w : número al que se le calcula el seno
     * @return LookupTable slt - la tabla con el resultado obtenido de aplicar la operación
     */
    private LookupTable seno (float w){
        double K = 255.0;
        byte[] lt = new byte[256];
        lt[0]=0;
        
        for (int l=1; l<256; l++){
            lt[l] = (byte)(K*(abs(sin(toRadians(w)*((float)l) ))));
        }
        
        ByteLookupTable slt = new ByteLookupTable(0,lt);
        
        return slt;
    }
    
    /**
     * Calcula la tabla de bits, byte a byte, fila a fila, y a cada uno de ellos
     * le calcula el arcotangente del valor absoluto del numero pasado como parámetro y 
     * el valor del bit en el que se encuentra. 
     * @param w : número al que se le calcula la función
     * @return LookupTable slt - la tabla con el resultado obtenido de aplicar la operación
     */
    private LookupTable miLookupOp (float w) {
        double K = 255.0;
        byte[] lt = new byte[256];
        lt[0]=0;
    
        for (int l=1; l<256; l++){
            lt[l] = (byte)(K*(abs(atan(toRadians(w)*((float)l) ))));
        }
        
        ByteLookupTable slt = new ByteLookupTable(0,lt);
        return slt;
    }
    
    
    /**
     * Obtencion de las bandas de una imagen seleccionada
     * @param img : imagen de la que vamos a obtener sus bandas
     * @param iBanda : índice de la banda
     * @return BufferedImage imgBanda - imagen con el raster correspondiente a la banda
     *         pasada por parámetro
     */
    private BufferedImage getBanda (BufferedImage img, int iBanda) {
        //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);

        //Creamos el nuevo raster a partir del raster de la imagen original
        int[] bandList = {iBanda};
        WritableRaster bandRaster = (WritableRaster)img.getRaster().createWritableChild(0,0,img.getWidth(),
                img.getHeight(), 0, 0, bandList);

        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);
        
        return imgBanda;
    }

    /**
     * Función para activar/desactivar distintos botones de propiedades de las
     * figuras, en función del estado de la bandera.
     * @param bandera : indica el estado de activación de las propiedades
     */
    public void setActivarPropiedadesFiguras(boolean bandera) {
        sliderTransparencia.setEnabled(bandera);
        ComboBColoresRelleno.setEnabled(bandera);
        paletaColoresRelleno.setEnabled(bandera);
        ComboBColoresTrazo.setEnabled(bandera);
        paletaColoresTrazo.setEnabled(bandera);
    }
    
    /**
     * Vuelve a establecer la imagen del lienzo a la del archivo original
     * @param vi : Ventana interna que contiene la imagen
     * @param img : Imagen utilizada para restaurar
     */
    private void ResetImg(VentanaInternaImagen vi, BufferedImage img) {
        vi.getLienzo().setImagen(img);
        vi.getLienzo().repaint();
    }
    
    /**
     * Método para obtener la extensión de cualquier archivo.
     * @return String extension : es el valor de la extensión.
     */
    private String getExtension(String archivo) {
        String extension = "";
        int i = archivo.lastIndexOf('.');
        if (i > 0) 
            extension = archivo.substring(i+1);
        
        return extension;
    }   
    
    private class ManejadorAudio implements LineListener {
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                BotPlay.setEnabled(false);
                BotPause.setEnabled(true);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                BotPlay.setEnabled(true);
                if (!pausa) {
                    BotPause.setEnabled(false);
                    player = null;
                }
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    }
    
    private class ManejadorGrabadora implements LineListener {
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                BotGrabar.setEnabled(false);
                BotPararGrabar.setEnabled(true);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                BotGrabar.setEnabled (true);
                BotPararGrabar.setEnabled(false);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    }
    
    private class VideoListener extends MediaPlayerEventAdapter {
        @Override
        public void playing(MediaPlayer mediaPlayer) {
            BotStop.setEnabled(true);
            BotPlay.setEnabled(false);
        }
        @Override
        public void paused(MediaPlayer mediaPlayer) {
            BotStop.setEnabled(false);
            BotPlay.setEnabled(true);
        }
        @Override
        public void finished(MediaPlayer mediaPlayer) {
            this.paused(mediaPlayer);
        }
    }
    
    
    /**
     * Método para cambiar el logo de la Ventana Principal de la Interfaz gráfica.
     * http://wiki.netbeans.org/TaT_CambiarIconoJFrame
     * @return Image retValue : Imagen obtenida a partir de la ruta especificada.
     */
    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("IconosPFinal/logoUGR.png"));

        return retValue;
    }

    /**
     * Método para acceder a la etiqueta relacionada con las coordenadas del raton en
     * la barra de estado desde la ventana interna.
     * @return JLabel estadoPunto : etiqueta asociada al estado del punto del pixel
     *                              en el que se encuentra el ratón.
     */
    public JLabel getEstadoPunto() {
        return estadoPunto;
    }

    /**
     * Método para acceder a la etiqueta relacionada con los valores Red, Green 
     * y Blue del pixel en el que se sitúa el ratón, enla barra de estado desde 
     * la ventana interna.
     * @return JLabel estadoRGB : etiqueta asociada al estado del punto del pixel
     *                              en el que se encuentra el ratón.
     */
    public JLabel getEstadoRGB() {
        return estadoRGB;
    }
    
    /**
     * Método para acceder al botón de guardar desde las diferentes VentanasInternas.
     * @return JButton BotGuardar : el propio botón.
     */
    public JButton getBotonGuardar () {
        return BotGuardar;
    }
    
    /**
     * Método para acceder al botón de mover desde las diferentes VentanasInternas.
     * @return JToggleButton BotMover : el propio botón.
     */
    public JToggleButton getBotonMover () {
        return BotMover;
    }
    
    /**
     * Método para acceder al combobox de las figuras desde la Ventana Imagen
     * @return JComboBoxJFigura comboListaFiguras : el propio comboBox.
     */
    public javax.swing.JComboBox<JFigura> getComboFiguras () {
        return comboListaFiguras;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar BHerramientasFiguras;
    private javax.swing.JToolBar BHerramientasOpciones;
    private javax.swing.JToolBar BHerramientasOtrosMedios;
    private javax.swing.JCheckBoxMenuItem BMeduEditbarrSonYVi;
    private javax.swing.JMenu BMenuArchivo;
    private javax.swing.JMenu BMenuAyuda;
    private javax.swing.JCheckBoxMenuItem BMenuEditbarrEstado;
    private javax.swing.JCheckBoxMenuItem BMenuEditbarrPropiedades;
    private javax.swing.JMenu BMenuImagen;
    private javax.swing.JMenu BMenuVer;
    private javax.swing.JLabel BarraEstado;
    private javax.swing.JMenuBar BarraMenu;
    private javax.swing.JButton BotAbrir;
    private javax.swing.JToggleButton BotAlisar;
    private javax.swing.JButton BotCamara;
    private javax.swing.JButton BotCapturaCam;
    private javax.swing.JToggleButton BotColorear;
    private javax.swing.JToggleButton BotElipse;
    private javax.swing.JToggleButton BotGrabar;
    private javax.swing.JButton BotGuardar;
    private javax.swing.JToggleButton BotLinea;
    private javax.swing.JToggleButton BotMover;
    private javax.swing.JButton BotNuevo;
    private javax.swing.JToggleButton BotPararGrabar;
    private javax.swing.JToggleButton BotPause;
    private javax.swing.JToggleButton BotPlay;
    private javax.swing.JToggleButton BotRectangulo;
    private javax.swing.JToggleButton BotStop;
    private javax.swing.JComboBox<Color> ComboBColoresRelleno;
    private javax.swing.JComboBox<Color> ComboBColoresTrazo;
    private javax.swing.JComboBox<String> ComboEspacioColores;
    private javax.swing.JComboBox<String> ComboFiltro;
    private javax.swing.JDesktopPane Escritorio;
    private javax.swing.JSpinner GrosorSpinner;
    private javax.swing.ButtonGroup GrupoBHerramientas;
    private javax.swing.ButtonGroup GrupoColores;
    private javax.swing.ButtonGroup GrupoGrabacion;
    private javax.swing.ButtonGroup GrupoSonido;
    private javax.swing.ButtonGroup GrupoUmbral;
    private javax.swing.JPanel PanBrillo;
    private javax.swing.JPanel PanColor;
    private javax.swing.JPanel PanContraste;
    private javax.swing.JPanel PanEscala;
    private javax.swing.JPanel PanFiltro;
    private javax.swing.JPanel PanInfPropiedades;
    private javax.swing.JPanel PanRotacion;
    private javax.swing.JPanel PanSinusoidal;
    private javax.swing.JPanel PanUmbral;
    private javax.swing.JPanel PanelBEstado;
    private javax.swing.JPanel PanelInferior;
    private javax.swing.JSlider SliderBrillo;
    private javax.swing.JButton botBandas;
    private javax.swing.JToggleButton botContrastIluminacion;
    private javax.swing.JToggleButton botContrastNeg;
    private javax.swing.JToggleButton botContrastNormal;
    private javax.swing.JToggleButton botContrastOscureci;
    private javax.swing.JToggleButton botEcualizar;
    private javax.swing.JButton botEscalaMas;
    private javax.swing.JButton botEscalaMenos;
    private javax.swing.JToggleButton botMiOpCC;
    private javax.swing.JToggleButton botMiOpPP;
    private javax.swing.JButton botRot180;
    private javax.swing.JButton botRot270;
    private javax.swing.JButton botRot90;
    private javax.swing.JToggleButton botSepia;
    private javax.swing.JToggleButton botSinusoidal;
    private javax.swing.JToggleButton botTintado;
    private javax.swing.JToggleButton botUmbralColor;
    private javax.swing.JToggleButton botUmbralGrises;
    private javax.swing.JToggleButton botUmbralInvertido;
    private javax.swing.JPanel colorSelecPaletaRelleno;
    private javax.swing.JPanel colorSelecPaletaTrazo;
    private javax.swing.JComboBox<String> comboDegradado;
    private javax.swing.JComboBox<JFigura> comboListaFiguras;
    private javax.swing.JComboBox<File> comboListaRepro;
    private javax.swing.JFormattedTextField coorX;
    private javax.swing.JFormattedTextField coorY;
    private javax.swing.JLabel estadoPunto;
    private javax.swing.JLabel estadoRGB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenuItem menuAffineTransformOp;
    private javax.swing.JMenuItem menuAyuAcercaDe;
    private javax.swing.JMenuItem menuBandCombineOp;
    private javax.swing.JMenuItem menuColorConvertOp;
    private javax.swing.JMenuItem menuConvolveOp;
    private javax.swing.JMenuItem menuDuplicarImg;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuLookupOp;
    private javax.swing.JMenuItem menuMilookupOp;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JMenuItem menuResacaleOp;
    private javax.swing.JMenuItem menuReset;
    private javax.swing.JToggleButton paletaColoresRelleno;
    private javax.swing.JToggleButton paletaColoresTrazo;
    private javax.swing.JPanel panelBHerramientas;
    private javax.swing.JPanel panelColorRelleno;
    private javax.swing.JPanel panelPuntoCoordenadas;
    private javax.swing.JPanel panelTrazo;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JSlider sliderTransparencia;
    private javax.swing.JSlider sliderUmbral;
    private javax.swing.JToggleButton trazoDiscontinuo;
    // End of variables declaration//GEN-END:variables
}

